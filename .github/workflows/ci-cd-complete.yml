name: Complete CI/CD Pipeline

on:
  push:
    branches: [main, master, develop, 'feature/**']
  pull_request:
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '20'

jobs:
  # Job 1: Code Quality & Security
  quality-security:
    name: Code Quality & Security Checks
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install root dependencies
        run: |
          npm ci --prefer-offline --no-audit

      - name: 📦 Install frontend dependencies
        run: |
          cd frontend && npm ci --prefer-offline --no-audit

      - name: 🔍 TypeScript type check
        run: npm run typecheck
        continue-on-error: false

      - name: 🎨 ESLint check
        run: npm run lint:check

      - name: 💅 Prettier format check
        run: npm run format:check

      - name: 🔒 ast-grep security scan
        run: npm run ast-grep:scan

      - name: 🔐 Secret scanning
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

      - name: 📊 SonarCloud Scan (if configured)
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true  # Don't fail if not configured

  # Job 2: Build & Test
  build-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: quality-security  # Only run after quality checks pass

    strategy:
      matrix:
        node-version: [18, 20]  # Test on multiple Node versions

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🏗️ Build frontend
        run: |
          cd frontend
          npm ci
          npm run build
        env:
          NEXT_TELEMETRY_DISABLED: 1

      - name: 🧪 Run unit tests
        run: npm test
        continue-on-error: true  # Continue if no tests configured yet

      - name: 📈 Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

  # Job 3: Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: quality-security

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔒 npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true  # Report but don't fail

      - name: 🛡️ Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

      - name: 📋 OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          path: '.'
          format: 'HTML'
        continue-on-error: true

  # Job 4: Deploy Preview (Vercel)
  deploy-preview:
    name: Deploy Preview to Vercel
    runs-on: ubuntu-latest
    needs: [quality-security, build-test]
    if: github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Vercel Preview
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          github-comment: true

  # Job 5: Production Deploy (only on main/master)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-security, build-test, security-audit]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Vercel Production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./frontend

      - name: 💬 Notify Slack (if configured)
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment completed!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()
        continue-on-error: true

  # Job 6: Enforce Branch Protection
  enforce-protection:
    name: Enforce Quality Gates
    runs-on: ubuntu-latest
    needs: [quality-security, build-test]
    if: always()  # Always run to check status

    steps:
      - name: ✅ Check all jobs passed
        run: |
          if [[ "${{ needs.quality-security.result }}" != "success" ]]; then
            echo "❌ Quality checks failed"
            exit 1
          fi
          if [[ "${{ needs.build-test.result }}" != "success" ]]; then
            echo "❌ Build/test failed"
            exit 1
          fi
          echo "✅ All checks passed!"

# Required status checks for branch protection:
# - quality-security
# - build-test (Node.js 20)
# - enforce-protection